-- Function: financas.desfazerrenegociacao_contratorecebimento(text)

-- DROP FUNCTION financas.desfazerrenegociacao_contratorecebimento(text);

CREATE OR REPLACE FUNCTION financas.desfazerrenegociacao_contratorecebimento(a_contratos text)
  RETURNS void AS
$BODY$
  DECLARE VAR_REC_PROCESSAMENTO RECORD; 
  DECLARE VAR_REC_ITEM RECORD;
  DECLARE VAR_USUARIOCORRENTE UUID;
  
  DECLARE AUX_PROCESSAMENTO_ANTERIOR UUID;
  DECLARE VAR_ITEM_DESPROCESSAR_JSON TEXT;
  DECLARE AUX_PVEZ_DESPROCESSAR BOOLEAN;
  DECLARE AUX_JSON JSON;
  DECLARE AUX_JS_CONTRATO JSON;
  DECLARE ID_PESSOA_CONTRATO UUID;
  
  DECLARE VAR_TITULO_NUMERO VARCHAR;
  DECLARE VAR_TITULO_SITUACAO INTEGER;
  DECLARE VAR_TITULO_ID UUID;
  DECLARE VAR_RENEGOCIACAO_ID UUID;
  DECLARE VAR_RPS_NUMERO VARCHAR;
  DECLARE VAR_RPS_SITUACAO INTEGER;
  DECLARE VAR_DOCFIS_ID UUID;
  DECLARE VAR_ENVIADOREMESSACOBRANCA BOOLEAN;
BEGIN
  BEGIN 	
    IF (a_contratos IS NULL) OR (a_contratos = '') THEN
      RAISE EXCEPTION 'Contrato não informado.';
    END IF;
		
    DROP TABLE IF EXISTS TMP_CONTRATOS;
    CREATE TEMPORARY TABLE TMP_CONTRATOS(CONTRATO UUID);
    AUX_JSON = a_contratos::JSON;
    FOR AUX_JS_CONTRATO IN ( SELECT * FROM json_array_elements((AUX_JSON->>'Contratos')::JSON ) ) LOOP
      INSERT INTO TMP_CONTRATOS(CONTRATO) VALUES ((AUX_JS_CONTRATO->>'contrato')::UUID);
    END LOOP;
		
    DROP TABLE IF EXISTS TAB_OCORRENCIAS;
    CREATE TEMPORARY TABLE TAB_OCORRENCIAS AS
      SELECT OC.OCORRENCIACONTRATO, OC.PROCESSAMENTOCONTRATO, OC.ITEMCONTRATO, OC.ANO, OC.MES, OC.SEMANA, OC.DIA, DF.ID AS DFSERVICO, IC.CONTRATO, DF.TITULO, 
             NOT ( ( B.ID IS NOT NULL) OR (( (DOC.ID IS NOT NULL) AND ( (COALESCE(DOC.STATUSRPS, 0) <> 0) AND (COALESCE(DOC.STATUSRPS, 0) <> 1) AND (COALESCE(DOC.STATUSRPS, 0) <> 7) ) ) AND 
                   ( DOC.TIPO IN (153, 5) AND DOC.MODELO IN ('RPS', 'NES') ) )) AS PODE_EXCLUIR
	  FROM FINANCAS.OCORRENCIASCONTRATOS OC 
	  JOIN FINANCAS.ITENSCONTRATOS IC ON (IC.ITEMCONTRATO = OC.ITEMCONTRATO)
	  JOIN TMP_CONTRATOS TC ON (TC.CONTRATO = IC.CONTRATO)
	  LEFT JOIN NS.DF_SERVICOS DF ON (OC.PROCESSAMENTOCONTRATO = DF.PROCESSAMENTOCONTRATO) AND (OC.ITEMCONTRATO = DF.ITEMCONTRATO)
      LEFT JOIN NS.DF_DOCFIS DOC ON DOC.ID = DF.ID_DOCFIS
      LEFT JOIN FINANCAS.BAIXAS B ON B.ID_TITULO = DF.TITULO;
	
    DROP TABLE IF EXISTS TAB_DESPROCESSADOS;
    CREATE TEMPORARY TABLE TAB_DESPROCESSADOS(tipolog integer, logfinal text, removeuprocessamento boolean);
	
    -- Desprocessa as ocorrências do contrato
    FOR VAR_REC_PROCESSAMENTO IN (SELECT DISTINCT PROCESSAMENTOCONTRATO, ANO, MES, SEMANA, DIA
	  						      FROM TAB_OCORRENCIAS
								  WHERE ( PROCESSAMENTOCONTRATO IS NOT NULL ) AND ( COALESCE(PODE_EXCLUIR, TRUE ) = TRUE ) 
								  ORDER BY ANO DESC, MES DESC, SEMANA DESC, DIA DESC)
    LOOP
      VAR_ITEM_DESPROCESSAR_JSON := '';
      AUX_PVEZ_DESPROCESSAR := TRUE;	
	
	  FOR VAR_REC_ITEM IN (SELECT DISTINCT DFSERVICO FROM TAB_OCORRENCIAS WHERE PROCESSAMENTOCONTRATO = VAR_REC_PROCESSAMENTO.PROCESSAMENTOCONTRATO)
	  LOOP
	    IF AUX_PVEZ_DESPROCESSAR THEN
   	      VAR_ITEM_DESPROCESSAR_JSON := '{"IdsItensDFServicos":[{"id":"' || VAR_REC_ITEM.DFSERVICO || '"}';
		  AUX_PVEZ_DESPROCESSAR := FALSE;
   	    ELSE
          VAR_ITEM_DESPROCESSAR_JSON := VAR_ITEM_DESPROCESSAR_JSON || ',{"id":"' || VAR_REC_ITEM.DFSERVICO || '"}';
        END IF;		
	  END LOOP;
	  VAR_ITEM_DESPROCESSAR_JSON := VAR_ITEM_DESPROCESSAR_JSON || ']}';
	  
	  INSERT INTO TAB_DESPROCESSADOS(tipolog, logfinal, removeuprocessamento)
   	    SELECT tipo, log, processamentoexcluido 
		FROM FINANCAS.FU_DESPROCESSAR(VAR_REC_PROCESSAMENTO.PROCESSAMENTOCONTRATO, VAR_ITEM_DESPROCESSAR_JSON);
	  
	  IF EXISTS (SELECT tipolog FROM TAB_DESPROCESSADOS WHERE tipolog = 0) THEN
	    RAISE EXCEPTION 'Erro ao desprocessar item [%].', (SELECT logfinal FROM TAB_DESPROCESSADOS WHERE tipolog = 0 LIMIT 1);
	  END IF;  
	  	  	  
    END LOOP;
  
    -- Exclui as ocorrências
    DELETE FROM FINANCAS.OCORRENCIASCONTRATOS WHERE OCORRENCIACONTRATO IN 
      (SELECT OCORRENCIACONTRATO FROM TAB_OCORRENCIAS WHERE COALESCE(PODE_EXCLUIR, TRUE ) = TRUE);
  
    -- Suspende os itens novamente
    UPDATE FINANCAS.ITENSCONTRATOS SET TIPOSUSPENSAO = 1 WHERE ITEMCONTRATO IN 
      (SELECT ITEMCONTRATO FROM TAB_OCORRENCIAS); -- 1 = TpTipoSuspensao.tsiSuspensaoServico
  
    -- Atualiza a flag da renegociação
    UPDATE FINANCAS.CONTRATOS SET CONTRATOEMRENEGOCIACAO = FALSE WHERE CONTRATO IN (SELECT CONTRATO FROM TMP_CONTRATOS);
	
	-- Remove as alterações de reativação de serviço 
	DELETE FROM FINANCAS.ALTERACOESCONTRATOS
	  WHERE CONTRATO IN (SELECT CONTRATO FROM TMP_CONTRATOS)
	  AND ITEMCONTRATO IN (SELECT ITEMCONTRATO FROM TAB_OCORRENCIAS)
	  AND ORIGEM = 1 AND TIPO = 6 AND STATUS = 0; -- Automático, Reativação de Serviço, Não Processado
	  
	-- Recria as alterações de suspensão de serviço	
	SELECT * FROM ns.get_usuario_corrente() AS (ID UUID) INTO VAR_USUARIOCORRENTE;
	FOR VAR_REC_ITEM IN (SELECT DISTINCT ITEMCONTRATO, CONTRATO FROM TAB_OCORRENCIAS)
	LOOP
	  INSERT INTO FINANCAS.ALTERACOESCONTRATOS(TIPO, ORIGEM, STATUS, TIPOSUSPENSAOANTERIOR, ITEMCONTRATO, CONTRATO, DATAPRINCIPAL, DATAAUXILIAR, USUARIO)
	    VALUES(4, 1, 1, 6, VAR_REC_ITEM.ITEMCONTRATO, VAR_REC_ITEM.CONTRATO, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, VAR_USUARIOCORRENTE);
	END LOOP;	
	
	
  -- ATUALIZA O STATUS DO CLIENTE (Todos os contratos pertencem ao mesmo cliente)
  SELECT PARTICIPANTE FROM FINANCAS.CONTRATOS WHERE CONTRATO = (SELECT CONTRATO FROM TMP_CONTRATOS LIMIT 1) INTO ID_PESSOA_CONTRATO;
  UPDATE NS.PESSOAS
  SET TIPOCLIENTEPAGAMENTO = 2, /* Cancelado (commonfeature.participantes.constants.TpTipoClientePagamento) */ 
      JUSTIFICATIVATIPOCLIENTEPAGAMENTO = 'O cliente possui contratos suspensos.'
  WHERE ID = ID_PESSOA_CONTRATO
    AND TIPOCONTROLEPAGAMENTO = 2; /* Automático (commonfeature.participantes.constants.TpTipoControlePagamento) */	
	
  -- ATUALIZA A RENEGOCIACAO
  SELECT COALESCE(T.SITUACAO, 0), T.NUMERO, T.ID, RC.RENEGOCIACAOCONTRATO, T.ID_DOCFIS, (COALESCE(T.ENVIADOREMESSACOBRANCA, FALSE) ) AS ENVIADOREMESSACOBRANCA 
    FROM FINANCAS.TITULOS T
    INNER JOIN FINANCAS.ITENSRENEGOCIACOESCONTRATOSTITULOSGERADOS IR ON IR.ID_TITULORECEBER = T.ID
    INNER JOIN FINANCAS.RENEGOCIACOESCONTRATOS RC ON RC.RENEGOCIACAOCONTRATO = IR.ID_RENEGOCIACAOCONTRATO
    WHERE RC.ID_CONTRATO IN (SELECT CONTRATO FROM TMP_CONTRATOS) 
	  AND RC.STATUS IN (0,1)
      AND T.ORIGEM = 34 /* Renegociação de Contrato */  
  INTO VAR_TITULO_SITUACAO, VAR_TITULO_NUMERO, VAR_TITULO_ID, VAR_RENEGOCIACAO_ID, VAR_DOCFIS_ID, VAR_ENVIADOREMESSACOBRANCA;
  
  IF VAR_TITULO_SITUACAO <> 0 THEN 
    RAISE EXCEPTION 'Não é possível desfazer a renegociação, pois o título gerado [%] não está aberto.', VAR_TITULO_NUMERO; 
  ELSE 
    -- VERIFICA SE TEM RPS NAO ABERTO
    SELECT COALESCE(DF.STATUSRPS, 0), DF.RPS
    FROM NS.DF_DOCFIS DF
    WHERE DF.ID = VAR_DOCFIS_ID AND DF.TIPO = 153 /* RPS */
	INTO VAR_RPS_SITUACAO, VAR_RPS_NUMERO;
	
	IF (VAR_RPS_SITUACAO <> 0) THEN
	  RAISE EXCEPTION 'Não é possível desfazer a renegociação, pois o RPS [%] não está aberto.', VAR_RPS_NUMERO;
	ELSE 	  
	  UPDATE FINANCAS.TITULOS SET ID_DOCFIS = NULL, ID_RPS = NULL WHERE ID_DOCFIS = VAR_DOCFIS_ID;	  
	  DELETE FROM NS.DF_SERVICOS WHERE ID_DOCFIS = VAR_DOCFIS_ID;
	  DELETE FROM NS.DF_DOCFIS WHERE ID = VAR_DOCFIS_ID;	  
	  UPDATE FINANCAS.RENEGOCIACOESCONTRATOS SET STATUS = 2 /* Suspensa (commonfeature.participantes.constants.TpStatusRenegociacao) */
	  WHERE RENEGOCIACAOCONTRATO = VAR_RENEGOCIACAO_ID;	
	  
	  --VERIFICA SE JÁ FOI GERADA A REMESSA PARA O TÍTULO, NESTE CASO CANCELA, SENÃO APAGA. 
      IF ( VAR_ENVIADOREMESSACOBRANCA = FALSE ) THEN --RGM
        DELETE FROM FINANCAS.TITULOS WHERE ID = VAR_TITULO_ID;
      ELSE
        UPDATE FINANCAS.TITULOS SET SITUACAO = 3 WHERE ID = VAR_TITULO_ID;

        INSERT INTO FINANCAS.HISTORICOSTITULOS( ID_TITULO, 
                                                ID_USUARIO, 
                                                TIPOTITULO, 
                                                TIPOALTERACAO, 
                                                VALORANTERIOR, 
                                                NOVOVALOR, 
                                                PROCESSADO, 
                                                DATAALTERACAO )
        VALUES( VAR_TITULO_ID, 
                VAR_USUARIOCORRENTE, 
                0, 
                3, 
                VAR_TITULO_SITUACAO, 
                3, 
                FALSE, 
                CURRENT_DATE ); 	
        
      END IF;
  
	END IF;	
  END IF;
	
  EXCEPTION
    WHEN OTHERS THEN
      RAISE EXCEPTION '%', SQLERRM;
  END;
	
  DROP TABLE IF EXISTS TAB_OCORRENCIAS;
  DROP TABLE IF EXISTS TAB_DESPROCESSADOS;
  
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION financas.desfazerrenegociacao_contratorecebimento(text)
  OWNER TO group_nasajon;
